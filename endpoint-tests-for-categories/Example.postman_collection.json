{
	"info": {
		"_postman_id": "f41e99d2-301e-4abb-ac7e-1a497599e2d1",
		"name": "Example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34760425"
	},
	"item": [
		{
			"name": "Login as admin",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"thomas@nodehill.com\",\n    \"password\": \"12345678\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup all test data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let testData = {",
							"    \"counter\": 0,",
							"    \"categories\": ",
							"    [",
							"        {",
							"            \"name\": \"Planeter\",",
							"            \"description\": \"objekt som är i en stjärnas omloppsbana\"",
							"        },",
							"        {",
							"            \"name\": \"Stjärnor\",",
							"            \"description\": \"mycket stora och självlysande himlakroppar av plasma\"",
							"        },",
							"        {",
							"            \"name\": \"Galaxer\",",
							"            \"description\": \"enorma grupper av stjärnor\"",
							"        },",
							"        {",
							"            \"name\": \"SvartaHål\",",
							"            \"description\": \"svart hål\"",
							"        },",
							"        {",
							"            \"name\": \"Kometer\",",
							"            \"description\": \"flyger snabbt\"",
							"        }",
							"    ],",
							"    \"products\": [",
							"        {",
							"            \"name\": \"Saturnus\",",
							"            \"description\": \"har många ringar\",",
							"            \"price\": 25,",
							"            \"categoryId\": \"Planeter\" ",
							"        },",
							"        {",
							"            \"name\": \"Jorden\",",
							"            \"description\": \"folke lever här\",",
							"            \"price\": 50,",
							"            \"categoryId\": \"Planeter\" ",
							"        },",
							"        {",
							"            \"name\": \"Mars\",",
							"            \"description\": \"röd och fin\",",
							"            \"price\": 75,",
							"            \"categoryId\": \"Planeter\" ",
							"        },",
							"        {",
							"            \"name\": \"Solen\",",
							"            \"description\": \"lyser ljust\",",
							"            \"price\": 600,",
							"            \"categoryId\": \"Stjärnor\" ",
							"        },",
							"        {",
							"            \"name\": \"Barnards Stjärna\",",
							"            \"description\": \"lyser fint\",",
							"            \"price\": 500,",
							"            \"categoryId\": \"Stjärnor\" ",
							"        },",
							"        {",
							"            \"name\": \"Lalande Stjärna\",",
							"            \"description\": \"lyser starkt\",",
							"            \"price\": 400,",
							"            \"categoryId\": \"Stjärnor\" ",
							"        },",
							"        {",
							"            \"name\": \"Vintergatan\",",
							"            \"description\": \"stor galax\",",
							"            \"price\": 700,",
							"            \"categoryId\": \"Galaxer\" ",
							"        },",
							"        {",
							"            \"name\": \"Canis Major\",",
							"            \"description\": \"nära vintergatan\",",
							"            \"price\": 800,",
							"            \"categoryId\": \"Galaxer\" ",
							"        },",
							"        {",
							"            \"name\": \"Sagittarius Elliptical\",",
							"            \"description\": \"också relativt nära vintergatan\",",
							"            \"price\": 850,",
							"            \"categoryId\": \"Galaxer\" ",
							"        },",
							"        {",
							"            \"name\": \"Messier 60\",",
							"            \"description\": \"stor och svart\",",
							"            \"price\": 500,",
							"            \"categoryId\": \"SvartaHål\" ",
							"        },",
							"        {",
							"            \"name\": \"Arp 220\",",
							"            \"description\": \"stor och stark\",",
							"            \"price\": 200,",
							"            \"categoryId\": \"SvartaHål\" ",
							"        },",
							"        {",
							"            \"name\": \"Ton 618\",",
							"            \"description\": \"stark och farlig\",",
							"            \"price\": 350,",
							"            \"categoryId\": \"SvartaHål\" ",
							"        }",
							"        ,",
							"        {",
							"            \"name\": \"Halley\",",
							"            \"description\": \"snabb och fin\",",
							"            \"price\": 40,",
							"            \"categoryId\": \"SvartaHål\" ",
							"        },",
							"        {",
							"            \"name\": \"Comet Encke\",",
							"            \"description\": \"väldigt snabb\",",
							"            \"price\": 20,",
							"            \"categoryId\": \"SvartaHål\" ",
							"        },",
							"        {",
							"            \"name\": \"Hyakutake\",",
							"            \"description\": \"snabb pch farlig\",",
							"            \"price\": 30,",
							"            \"categoryId\": \"SvartaHål\" ",
							"        }",
							"    ],",
							"    \"comments\": [",
							"        {",
							"            \"comment\": \"very nice planet\",",
							"            \"userId\": 10,",
							"            \"productId\": \"Saturnus\"",
							"        }",
							"    ]",
							"};",
							"",
							"pm.collectionVariables.set(\"testData\", testData);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Not doing any tests here"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001"
				}
			},
			"response": []
		},
		{
			"name": "Create Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testData = pm.collectionVariables.get(\"testData\");",
							"let category = testData.categories[testData.counter];",
							"",
							"let response = pm.response;",
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Test that we get an insert id back",
							"// also add the id in our test data (for future tests)",
							"pm.test(\"We should get an insertId back\", () => {",
							"    pm.expect(responseData.insertId).to.be.a('number');",
							"    // Add the property id to the category with the",
							"    // id recieved from the REST-api",
							"    category.id = responseData.insertId;",
							"    // Log",
							"    console.log(\"The category has been created\", category);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"// (also including the id we set in the second test)",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// If there are more categories, set the next request to \"Create categories\"",
							"if (testData.categories[testData.counter]) {",
							"    pm.execution.setNextRequest(\"Create Categories\");",
							"} else {",
							"    console.log(\"All categories have been created.\");",
							"    // Reset the counter for the next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\", testData);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let testData = pm.collectionVariables.get(\"testData\");",
							"",
							"let category = testData.categories[testData.counter];",
							"",
							"pm.variables.set(\"name\", category.name);",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that the REST-api returns the sama data",
							"// as our test data for the category",
							"pm.test(\"Test that the correct category data is returned\", ()=> {",
							"  console.log(\"category\", category);",
							"  console.log(\"responseData\", responseData);",
							"  pm.expect(category).to.deep.equal(responseData); ",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get Categories\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been read correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Find the category with matching name\r",
							"let categoryWithMatchingName = testData.categories.find(category => {\r",
							"    return category.name == product.categoryId;\r",
							"});\r",
							"\r",
							"if (!categoryWithMatchingName) {\r",
							"    console.log(\"Category with name\", product.categoryId, \"not found.\");\r",
							"    // Handle this case according to your requirements\r",
							"} else {\r",
							"    // Retrieve the category ID\r",
							"    let categoryId = categoryWithMatchingName.id;\r",
							"\r",
							"    // Set categoryId to the retrieved ID\r",
							"    product.categoryId = categoryId;\r",
							"    // Save changes to our test data (the new value of categoryId)\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"    // pm variables have a scope of one request\r",
							"    // setting variables used in the body\r",
							"    pm.variables.set(\"name\", product.name);\r",
							"    pm.variables.set(\"description\", product.description);\r",
							"    pm.variables.set(\"price\", product.price);\r",
							"    pm.variables.set(\"categoryId\", product.categoryId);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Test that we get an insert id back\r",
							"// also add the id in our test data (for future tests)\r",
							"pm.test(\"We should get an insertId back\", () => {\r",
							"    pm.expect(responseData.insertId).to.be.a('number');\r",
							"    // Add the property id to the category with the\r",
							"    // id recieved from the REST-api\r",
							"    product.id = responseData.insertId;\r",
							"    // Log\r",
							"    console.log(\"Product created with ID:\", product.id);});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"// (also including the id we set in the second test)\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if (testData.products[testData.counter]) {\r",
							"    // Continue with the next product\r",
							"    pm.execution.setNextRequest(\"Create Products\");\r",
							"} else {\r",
							"    // No more products remaining\r",
							"    console.log(\"All products have been created.\");\r",
							"    testData.counter= 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"price\": \"{{price}}\",\r\n    \"categoryId\": \"{{categoryId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct products data is returned\", ()=> {\r",
							"  console.log(\"product\", product);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(product).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get Products\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All products have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Comment Admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current comment\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Find the product with matching name\r",
							"let productWithMatchingName = testData.products.find(product => {\r",
							"    return product.name == comment.productId;\r",
							"});\r",
							"\r",
							"if (!productWithMatchingName) {\r",
							"    console.log(\"product with name\", comment.productId, \"not found.\");\r",
							"    // Handle this case according to your requirements\r",
							"} else {\r",
							"    // Retrieve the product ID\r",
							"    let productId = productWithMatchingName.id;\r",
							"\r",
							"    // Set productId to the retrieved ID\r",
							"    comment.productId = productId;\r",
							"    // Save changes to our test data (the new value of productId)\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"    // pm variables have a scope of one request\r",
							"    // setting variables used in the body\r",
							"    pm.variables.set(\"comment\", comment.comment);\r",
							"    pm.variables.set(\"userId\", comment.userId);\r",
							"    pm.variables.set(\"productId\", comment.productId);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let comment = testData.comments[testData.counter];\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Test that we get an insert id back\r",
							"// also add the id in our test data (for future tests)\r",
							"pm.test(\"We should get an insertId back\", () => {\r",
							"    pm.expect(responseData.insertId).to.be.a('number');\r",
							"    // Add the property id to the category with the\r",
							"    // id recieved from the REST-api\r",
							"    comment.id = responseData.insertId;\r",
							"    // Log\r",
							"    console.log(\"The comment has been created\", comment);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"// (also including the id we set in the second test)\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more comments - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if (testData.comments[testData.counter]) {\r",
							"    // Continue with the next comment\r",
							"    pm.execution.setNextRequest(\"Create Comment Admin\");\r",
							"} else {\r",
							"    // No more comments remaining\r",
							"    console.log(\"All comments have been created.\");\r",
							"    testData.counter= 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": \"{{productId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Comments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", comment.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the category\r",
							"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
							"  console.log(\"comment\", comment);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(comment).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more categories - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get Comments\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Categories",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Change the description and save to collectionVariables",
							"category.description += \" Some extra text in the description.\";",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", category.id); ",
							"",
							"// Set a pm variable to description (it is used in the request body)",
							"pm.variables.set(\"description\", category.description);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let category = testData.categories[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rows Affected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.categories[testData.counter]){",
							"    pm.execution.setNextRequest(\"Change Categories\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All category-decriptions have been changed.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"{{description}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get categories after change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", category.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let category = testData.categories[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the category\r",
							"pm.test(\"Test that the correct category data is returned\", ()=> {\r",
							"  console.log(\"category\", category);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(category).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more categories - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.categories[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get categories after change\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All categories have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"categories",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"product.description += \" Some extra text in the description.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); \r",
							"\r",
							"// Set a pm variable to description (it is used in the request body)\r",
							"pm.variables.set(\"description\", product.description);\r",
							"\r",
							"pm.variables.set(\"price\", product.price);\r",
							"\r",
							"pm.variables.set(\"categoryId\", product.categoryId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more categories - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change Products\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All product-decriptions have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"{{description}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products after change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"\r",
							"console.log(\"HAHA counter\", testData.counter);\r",
							"console.log(\"HAHA product\", product);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let product = testData.products[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the product\r",
							"pm.test(\"Test that the correct products data is returned\", ()=> {\r",
							"  console.log(\"product\", product);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(product).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more products - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.products[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get products after change\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All products have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Comments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Change the description and save to collectionVariables\r",
							"comment.comment += \" Some extra text in the description.\";\r",
							"pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", comment.id);\r",
							"pm.variables.set(\"comment\", comment.comment);\r",
							"pm.variables.set(\"userId\", comment.userId);\r",
							"pm.variables.set(\"productId\", comment.productId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current comment\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more comments - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Change Comments\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comment-decriptions have been changed.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"{{comment}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments after change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Set a pm variable to id (it is used in the request url)\r",
							"pm.variables.set(\"id\", comment.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current category\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the REST-api returns the sama data\r",
							"// as our test data for the category\r",
							"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
							"  console.log(\"comment\", comment);\r",
							"  console.log(\"responseData\", responseData);\r",
							"  pm.expect(comment).to.deep.equal(responseData); \r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more categories - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Get comments after change\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been read correctly.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout admin",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"thomas@nodehill.com\",\r\n    \"password\": \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"ulyal0@tripadvisor.com\",\r\n    \"password\": \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Comment User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current comment\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Find the product with matching name\r",
							"let productWithMatchingName = testData.products.find(product => {\r",
							"    return product.name == comment.productId;\r",
							"});\r",
							"\r",
							"if (!productWithMatchingName) {\r",
							"    console.log(\"product with name\", comment.productId, \"not found.\");\r",
							"    // Handle this case according to your requirements\r",
							"} else {\r",
							"    // Retrieve the product ID\r",
							"    let productId = productWithMatchingName.id;\r",
							"\r",
							"    // Set productId to the retrieved ID\r",
							"    comment.productId = productId;\r",
							"    // Save changes to our test data (the new value of productId)\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"\r",
							"    // pm variables have a scope of one request\r",
							"    // setting variables used in the body\r",
							"    pm.variables.set(\"comment\", comment.comment);\r",
							"    pm.variables.set(\"userId\", comment.userId);\r",
							"    pm.variables.set(\"productId\", comment.productId);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current product\r",
							"let comment = testData.comments[testData.counter];\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 200 code (ok request) back\r",
							"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that affected rows equals 1\r",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
							"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
							"});\r",
							"\r",
							"// Test that we get an insert id back\r",
							"// also add the id in our test data (for future tests)\r",
							"pm.test(\"We should get an insertId back\", () => {\r",
							"    pm.expect(responseData.insertId).to.be.a('number');\r",
							"    // Add the property id to the category with the\r",
							"    // id recieved from the REST-api\r",
							"    comment.id = responseData.insertId;\r",
							"    // Log\r",
							"    console.log(\"The comment has been created\", comment);\r",
							"});\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"// (also including the id we set in the second test)\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more comments - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if (testData.comments[testData.counter]) {\r",
							"    // Continue with the next comment\r",
							"    pm.execution.setNextRequest(\"Create Comment Admin\");\r",
							"} else {\r",
							"    // No more comments remaining\r",
							"    console.log(\"All comments have been created.\");\r",
							"    testData.counter= 0;\r",
							"    pm.collectionVariables.set(\"testData\", testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": \"{{productId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "data",
			"value": ""
		},
		{
			"key": "testData",
			"value": ""
		}
	]
}